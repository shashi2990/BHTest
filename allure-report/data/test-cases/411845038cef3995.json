{"uid":"411845038cef3995","name":"test_find_center_functionality","fullName":"TestCases.test_BH#test_find_center_functionality","historyId":"0ac9e06adb16d33261c00642f503273e","time":{"start":1739619558751,"stop":1739619598061,"duration":39310},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"4fb8f2f508d5fa43c2c7a930f77b7317\")>\n\n    def test_find_center_functionality(setup):\n        driver = setup\n        home_page = HomePage(driver)\n    \n        # Navigate to Find Center\n        home_page.close_welcome_banner()\n        home_page.find_center()\n    \n        web_url = driver.current_url\n        param_url = \"child-care-locator\"\n        if param_url in web_url:\n            print(\"Parameter is correctly applied in the URL\")\n        else:\n            print(\"Parameter is missing or incorrect\")\n        log.logger.info(\"URL parameter is correctly applied.\")\n    \n        # Search for centers\n        find_center_page = FindCenterPage(driver)\n        find_center_page.search_bar_on_centerpage()\n        find_center_page.enter_key_on_searchBar()\n    \n        # Validate search results count\n        find_center_page.final_count()\n        total_count = find_center_page.final_count()\n>       find_center_page.get_all_counts()\n\nTestCases\\test_BH.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\findCenter_page.py:44: in get_all_counts\n    all_elements = self.get_all_elements(By.XPATH, configData.XPATH[\"get_All_Counts\"])\nPages\\basePage.py:58: in get_all_elements\n    elements = self.wait.until(EC.presence_of_all_elements_located((by, value)))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"4fb8f2f508d5fa43c2c7a930f77b7317\")>\nmethod = <function presence_of_all_elements_located.<locals>._predicate at 0x000001A36CA52020>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        ----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:146: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1739619549617,"stop":1739619558751,"duration":9134},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"4fb8f2f508d5fa43c2c7a930f77b7317\")>\n\n    def test_find_center_functionality(setup):\n        driver = setup\n        home_page = HomePage(driver)\n    \n        # Navigate to Find Center\n        home_page.close_welcome_banner()\n        home_page.find_center()\n    \n        web_url = driver.current_url\n        param_url = \"child-care-locator\"\n        if param_url in web_url:\n            print(\"Parameter is correctly applied in the URL\")\n        else:\n            print(\"Parameter is missing or incorrect\")\n        log.logger.info(\"URL parameter is correctly applied.\")\n    \n        # Search for centers\n        find_center_page = FindCenterPage(driver)\n        find_center_page.search_bar_on_centerpage()\n        find_center_page.enter_key_on_searchBar()\n    \n        # Validate search results count\n        find_center_page.final_count()\n        total_count = find_center_page.final_count()\n>       find_center_page.get_all_counts()\n\nTestCases\\test_BH.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\findCenter_page.py:44: in get_all_counts\n    all_elements = self.get_all_elements(By.XPATH, configData.XPATH[\"get_All_Counts\"])\nPages\\basePage.py:58: in get_all_elements\n    elements = self.wait.until(EC.presence_of_all_elements_located((by, value)))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"4fb8f2f508d5fa43c2c7a930f77b7317\")>\nmethod = <function presence_of_all_elements_located.<locals>._predicate at 0x000001A36CA52020>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        ----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:146: TimeoutException","steps":[],"attachments":[{"uid":"1c93d502f912ecd4","name":"log","source":"1c93d502f912ecd4.txt","type":"text/plain","size":1698},{"uid":"8452e9e0cd6a89d4","name":"stdout","source":"8452e9e0cd6a89d4.txt","type":"text/plain","size":42}],"parameters":[],"hasContent":true,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":2},"afterStages":[{"name":"setup::0","time":{"start":1739619602393,"stop":1739619604638,"duration":2245},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"parentSuite","value":"TestCases"},{"name":"suite","value":"test_BH"},{"name":"host","value":"Shashi-Laptop"},{"name":"thread","value":"20464-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"TestCases.test_BH"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"411845038cef3995.json","parameterValues":[]}