{"name": "test_find_center_functionality", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"61f8f6cf54a2859462613aac3e22dc6b\")>\n\n    def test_find_center_functionality(setup):\n        driver = setup\n        home_page = HomePage(driver)\n    \n        # Navigate to Find Center\n        home_page.close_welcome_banner()\n>       home_page.find_center()\n\ntest_BH.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\Pages\\home_page.py:53: in find_center\n    self.click_element(By.XPATH, configData.XPATH[\"find_Center\"])\n..\\Pages\\basePage.py:19: in click_element\n    element = self.wait.until(EC.element_to_be_clickable((by, value)))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"61f8f6cf54a2859462613aac3e22dc6b\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x00000182562B1620>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        ----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nD:\\Study\\BDD\\.venv1\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:146: TimeoutException"}, "attachments": [{"name": "log", "source": "db979f5f-5373-470d-940a-905525c2f5ab-attachment.txt", "type": "text/plain"}], "start": 1741520974292, "stop": 1741520984671, "uuid": "6926ee95-1bce-4005-97f4-e484b2918706", "historyId": "2ce3ca604084842e2294f504f9340bfc", "testCaseId": "2ce3ca604084842e2294f504f9340bfc", "fullName": "test_BH#test_find_center_functionality", "labels": [{"name": "suite", "value": "test_BH"}, {"name": "host", "value": "Shashi-Laptop"}, {"name": "thread", "value": "14564-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_BH"}]}